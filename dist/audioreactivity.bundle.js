!function(t){var e={};function s(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)s.d(i,r,function(e){return t[e]}.bind(null,r));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=15)}({0:function(t,e,s){(function(s){var i,r,n;r=[],void 0===(n="function"==typeof(i=function(){"use strict";function e(t,e,s){var i=new XMLHttpRequest;i.open("GET",t),i.responseType="blob",i.onload=function(){o(i.response,e,s)},i.onerror=function(){console.error("could not download file")},i.send()}function i(t){var e=new XMLHttpRequest;return e.open("HEAD",t,!1),e.send(),200<=e.status&&299>=e.status}function r(t){try{t.dispatchEvent(new MouseEvent("click"))}catch(s){var e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),t.dispatchEvent(e)}}var n="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof s&&s.global===s?s:void 0,o=n.saveAs||"object"!=typeof window||window!==n?function(){}:"download"in HTMLAnchorElement.prototype?function(t,s,o){var a=n.URL||n.webkitURL,h=document.createElement("a");s=s||t.name||"download",h.download=s,h.rel="noopener","string"==typeof t?(h.href=t,h.origin===location.origin?r(h):i(h.href)?e(t,s,o):r(h,h.target="_blank")):(h.href=a.createObjectURL(t),setTimeout(function(){a.revokeObjectURL(h.href)},4e4),setTimeout(function(){r(h)},0))}:"msSaveOrOpenBlob"in navigator?function(t,s,n){if(s=s||t.name||"download","string"!=typeof t)navigator.msSaveOrOpenBlob(function(t,e){return void 0===e?e={autoBom:!1}:"object"!=typeof e&&(console.warn("Depricated: Expected third argument to be a object"),e={autoBom:!e}),e.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob(["\ufeff",t],{type:t.type}):t}(t,n),s);else if(i(t))e(t,s,n);else{var o=document.createElement("a");o.href=t,o.target="_blank",setTimeout(function(){r(o)})}}:function(t,s,i,r){if((r=r||open("","_blank"))&&(r.document.title=r.document.body.innerText="downloading..."),"string"==typeof t)return e(t,s,i);var o="application/octet-stream"===t.type,a=/constructor/i.test(n.HTMLElement)||n.safari,h=/CriOS\/[\d]+/.test(navigator.userAgent);if((h||o&&a)&&"object"==typeof FileReader){var l=new FileReader;l.onloadend=function(){var t=l.result;t=h?t:t.replace(/^data:[^;]*;/,"data:attachment/file;"),r?r.location.href=t:location=t,r=null},l.readAsDataURL(t)}else{var c=n.URL||n.webkitURL,_=c.createObjectURL(t);r?r.location=_:location.href=_,r=null,setTimeout(function(){c.revokeObjectURL(_)},4e4)}};n.saveAs=o.saveAs=o,t.exports=o})?i.apply(e,r):i)||(t.exports=n)}).call(this,s(2))},1:function(t,e,s){"use strict";var i={CircleDiameter:5,InitialClusterType:"Random",WalkerSource:"Random",MaxWalkers:8e3,EdgeMargin:0,PruneOldWalkers:!1,MaxAge:30,ReplenishWalkers:!1,PruneDistantWalkers:!1,MaxWanderDistance:20,VaryDiameterByDistance:!1,VaryDiameterRandomly:!1,ShowClusters:!0,ShowWalkers:!0,ShowShapes:!0,BiasTowards:"",BiasForce:1,UsePerWalkerBias:!0,UseFrame:!0,FrameSize:900,CaptureLines:!0,RenderMode:"Shapes",UseStroke:!1,UseColors:!1,BackgroundColor:{h:0,s:68,b:0},WalkerColor:{h:0,s:0,b:20},ClusterColor:{h:0,s:100,b:100},ShapeColor:{h:0,s:0,b:20},LineColor:{h:0,s:100,b:66},FrameColor:{h:0,s:68,b:66}};const r=[];class n{constructor(){this._bvh_parent=null,this._bvh_branch=!0,this._bvh_left=null,this._bvh_right=null,this._bvh_sort=0,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}static getBranch(){return r.length?r.pop():new n}static releaseBranch(t){r.push(t)}static sortBranches(t,e){return t.sort>e.sort?-1:1}}class o{constructor(){this._hierarchy=null,this._bodies=[],this._dirty_branches=[]}insert(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=this,this._bodies.push(t)}const s=t._polygon,i=t.x,r=t.y;s&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords();const o=t._bvh_padding,a=s?0:t.radius*t.scale,h=(s?t._min_x:i-a)-o,l=(s?t._min_y:r-a)-o,c=(s?t._max_x:i+a)+o,_=(s?t._max_y:r+a)+o;t._bvh_min_x=h,t._bvh_min_y=l,t._bvh_max_x=c,t._bvh_max_y=_;let u=this._hierarchy,d=0;if(u)for(;;){if(!u._bvh_branch){const e=u._bvh_parent,s=u._bvh_min_x,i=u._bvh_min_y,r=u._bvh_max_x,o=u._bvh_max_y,a=u._bvh_parent=t._bvh_parent=n.getBranch();a._bvh_parent=e,a._bvh_left=u,a._bvh_right=t,a._bvh_sort=d++,a._bvh_min_x=h<s?h:s,a._bvh_min_y=l<i?l:i,a._bvh_max_x=c>r?c:r,a._bvh_max_y=_>o?_:o,e?e._bvh_left===u?e._bvh_left=a:e._bvh_right=a:this._hierarchy=a;break}{const t=u._bvh_left,e=t._bvh_min_y,s=t._bvh_max_x,i=t._bvh_max_y,r=h<t._bvh_min_x?h:t._bvh_min_x,n=l<e?l:e,o=c>s?c:s,a=_>i?_:i,g=(o-r)*(a-n)-(s-t._bvh_min_x)*(i-e),p=u._bvh_right,y=p._bvh_min_x,m=p._bvh_min_y,f=p._bvh_max_x,b=p._bvh_max_y,x=h<y?h:y,v=l<m?l:m,w=c>f?c:f,k=_>b?_:b,C=(w-x)*(k-v)-(f-y)*(b-m);u._bvh_sort=d++,u._bvh_min_x=r<x?r:x,u._bvh_min_y=n<v?n:v,u._bvh_max_x=o>w?o:w,u._bvh_max_y=a>k?a:k,u=g<=C?t:p}}else this._hierarchy=t}remove(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=null,this._bodies.splice(this._bodies.indexOf(t),1)}if(this._hierarchy===t)return void(this._hierarchy=null);const s=t._bvh_parent,i=s._bvh_parent,r=s._bvh_left,o=r===t?s._bvh_right:r;if(o._bvh_parent=i,o._bvh_branch&&(o._bvh_sort=s._bvh_sort),i){i._bvh_left===s?i._bvh_left=o:i._bvh_right=o;let t=i;for(;t;){const e=t._bvh_left,s=e._bvh_min_x,i=e._bvh_min_y,r=e._bvh_max_x,n=e._bvh_max_y,o=t._bvh_right,a=o._bvh_min_x,h=o._bvh_min_y,l=o._bvh_max_x,c=o._bvh_max_y;t._bvh_min_x=s<a?s:a,t._bvh_min_y=i<h?i:h,t._bvh_max_x=r>l?r:l,t._bvh_max_y=n>c?n:c,t=t._bvh_parent}}else this._hierarchy=o;n.releaseBranch(s)}update(){const t=this._bodies,e=t.length;for(let s=0;s<e;++s){const e=t[s];let i=!1;if(i||e.padding===e._bvh_padding||(e._bvh_padding=e.padding,i=!0),!i){const t=e._polygon;t&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords();const s=e.x,r=e.y,n=t?0:e.radius*e.scale,o=t?e._min_x:s-n,a=t?e._min_y:r-n,h=t?e._max_x:s+n,l=t?e._max_y:r+n;i=o<e._bvh_min_x||a<e._bvh_min_y||h>e._bvh_max_x||l>e._bvh_max_y}i&&(this.remove(e,!0),this.insert(e,!0))}}potentials(t){const e=[],s=t._bvh_min_x,i=t._bvh_min_y,r=t._bvh_max_x,n=t._bvh_max_y;let o=this._hierarchy,a=!0;if(!o||!o._bvh_branch)return e;for(;o;){if(a){a=!1;let t=o._bvh_branch?o._bvh_left:null;for(;t&&t._bvh_max_x>=s&&t._bvh_max_y>=i&&t._bvh_min_x<=r&&t._bvh_min_y<=n;)t=(o=t)._bvh_branch?o._bvh_left:null}const h=o._bvh_branch,l=h?o._bvh_right:null;if(l&&l._bvh_max_x>s&&l._bvh_max_y>i&&l._bvh_min_x<r&&l._bvh_min_y<n)o=l,a=!0;else{h||o===t||e.push(o);let s=o._bvh_parent;if(!s)break;for(;s&&s._bvh_right===o;)s=(o=s)._bvh_parent;o=s}}return e}draw(t){const e=this._bodies,s=e.length;for(let i=0;i<s;++i)e[i].draw(t)}drawBVH(t){let e=this._hierarchy,s=!0;for(;e;){if(s){s=!1;let t=e._bvh_branch?e._bvh_left:null;for(;t;)t=(e=t)._bvh_branch?e._bvh_left:null}const i=e._bvh_branch,r=e._bvh_min_x,n=e._bvh_min_y,o=e._bvh_max_x,a=e._bvh_max_y,h=i?e._bvh_right:null;if(t.moveTo(r,n),t.lineTo(o,n),t.lineTo(o,a),t.lineTo(r,a),t.lineTo(r,n),h)e=h,s=!0;else{let t=e._bvh_parent;if(!t)break;for(;t&&t._bvh_right===e;)t=(e=t)._bvh_parent;e=t}}}}class a{constructor(){this.collision=!1,this.a=null,this.b=null,this.a_in_b=!1,this.a_in_b=!1,this.overlap=0,this.overlap_x=0,this.overlap_y=0}}function h(t,e,s=null,i=!0){const r=t._polygon,n=e._polygon;let o=!1;return s&&(s.a=t,s.b=e,s.a_in_b=!0,s.b_in_a=!0,s.overlap=null,s.overlap_x=0,s.overlap_y=0),r&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords(),n&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords(),i&&!function(t,e){const s=t._polygon,i=s?0:t.x,r=s?0:t.y,n=s?0:t.radius*t.scale,o=s?t._min_x:i-n,a=s?t._min_y:r-n,h=s?t._max_x:i+n,l=s?t._max_y:r+n,c=e._polygon,_=c?0:e.x,u=c?0:e.y,d=c?0:e.radius*e.scale,g=c?e._min_x:_-d,p=c?e._min_y:u-d,y=c?e._max_x:_+d,m=c?e._max_y:u+d;return o<y&&a<m&&h>g&&l>p}(t,e)||(r&&t._dirty_normals&&t._calculateNormals(),n&&e._dirty_normals&&e._calculateNormals(),o=r&&n?function(t,e,s=null){const i=t._coords.length,r=e._coords.length;if(2===i&&2===r){const i=t._coords,r=e._coords;return s&&(s.overlap=0),i[0]===r[0]&&i[1]===r[1]}const n=t._coords,o=e._coords,a=t._normals,h=e._normals;if(i>2)for(let t=0,e=1;t<i;t+=2,e+=2)if(c(n,o,a[t],a[e],s))return!1;if(r>2)for(let t=0,e=1;t<r;t+=2,e+=2)if(c(n,o,h[t],h[e],s))return!1;return!0}(t,e,s):r?l(t,e,s,!1):n?l(e,t,s,!0):function(t,e,s=null){const i=t.radius*t.scale,r=e.radius*e.scale,n=e.x-t.x,o=e.y-t.y,a=i+r,h=n*n+o*o;if(h>a*a)return!1;if(s){const t=Math.sqrt(h);s.a_in_b=i<=r&&t<=r-i,s.b_in_a=r<=i&&t<=i-r,s.overlap=a-t,s.overlap_x=n/t,s.overlap_y=o/t}return!0}(t,e,s)),s&&(s.collision=o),o}function l(t,e,s=null,i=!1){const r=t._coords,n=t._edges,o=t._normals,a=e.x,h=e.y,l=e.radius*e.scale,c=2*l,_=l*l,u=r.length;let d=!0,g=!0,p=null,y=0,m=0;if(2===u){const t=a-r[0],e=h-r[1],i=t*t+e*e;if(i>_)return!1;if(s){const s=Math.sqrt(i);p=l-s,y=t/s,m=e/s,g=!1}}else for(let t=0,e=1;t<u;t+=2,e+=2){const i=a-r[t],f=h-r[e],b=n[t],x=n[e],v=i*b+f*x,w=v<0?-1:v>b*b+x*x?1:0;let k=!1,C=0,F=0,S=0;if(s&&d&&i*i+f*f>_&&(d=!1),w){const e=-1===w,o=e?0===t?u-2:t-2:t===u-2?0:t+2,c=o+1,d=a-r[o],p=h-r[c],y=n[o],m=n[c],b=d*y+p*m;if((b<0?-1:b>y*y+m*m?1:0)===-w){const t=e?i:d,r=e?f:p,n=t*t+r*r;if(n>_)return!1;if(s){const e=Math.sqrt(n);k=!0,C=l-e,F=t/e,S=r/e,g=!1}}}else{const r=o[t],n=o[e],a=i*r+f*n,h=a<0?-a:a;if(a>0&&h>l)return!1;s&&(k=!0,C=l-a,F=r,S=n,(g&&a>=0||C<c)&&(g=!1))}k&&(null===p||p>C)&&(p=C,y=F,m=S)}return s&&(s.a_in_b=i?g:d,s.b_in_a=i?d:g,s.overlap=p,s.overlap_x=i?-y:y,s.overlap_y=i?-m:m),!0}function c(t,e,s,i,r=null){const n=t.length,o=e.length;if(!n||!o)return!0;let a=null,h=null,l=null,c=null;for(let e=0,r=1;e<n;e+=2,r+=2){const n=t[e]*s+t[r]*i;(null===a||a>n)&&(a=n),(null===h||h<n)&&(h=n)}for(let t=0,r=1;t<o;t+=2,r+=2){const n=e[t]*s+e[r]*i;(null===l||l>n)&&(l=n),(null===c||c<n)&&(c=n)}if(a>c||h<l)return!0;if(r){let t=0;if(a<l)if(r.a_in_b=!1,h<c)t=h-l,r.b_in_a=!1;else{const e=h-l,s=c-a;t=e<s?e:-s}else if(r.b_in_a=!1,h>c)t=a-c,r.a_in_b=!1;else{const e=h-l,s=c-a;t=e<s?e:-s}const e=r.overlap,n=t<0?-t:t;if(null===e||e>n){const e=t<0?-1:1;r.overlap=n,r.overlap_x=s*e,r.overlap_y=i*e}}return!1}class _{constructor(t=0,e=0,s=0){this.x=t,this.y=e,this.padding=s,this._circle=!1,this._polygon=!1,this._point=!1,this._bvh=null,this._bvh_parent=null,this._bvh_branch=!1,this._bvh_padding=s,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}collides(t,e=null,s=!0){return h(this,t,e,s)}potentials(){const t=this._bvh;if(null===t)throw new Error("Body does not belong to a collision system");return t.potentials(this)}remove(){const t=this._bvh;t&&t.remove(this,!1)}createResult(){return new a}static createResult(){return new a}}class u extends _{constructor(t=0,e=0,s=0,i=1,r=0){super(t,e,r),this.radius=s,this.scale=i}draw(t){const e=this.x,s=this.y,i=this.radius*this.scale;t.moveTo(e+i,s),t.arc(e,s,i,0,2*Math.PI)}}class d extends _{constructor(t=0,e=0,s=[],i=0,r=1,n=1,o=0){super(t,e,o),this.angle=i,this.scale_x=r,this.scale_y=n,this._polygon=!0,this._x=t,this._y=e,this._angle=i,this._scale_x=r,this._scale_y=n,this._min_x=0,this._min_y=0,this._max_x=0,this._max_y=0,this._points=null,this._coords=null,this._edges=null,this._normals=null,this._dirty_coords=!0,this._dirty_normals=!0,d.prototype.setPoints.call(this,s)}draw(t){(this._dirty_coords||this.x!==this._x||this.y!==this._y||this.angle!==this._angle||this.scale_x!==this._scale_x||this.scale_y!==this._scale_y)&&this._calculateCoords();const e=this._coords;if(2===e.length)t.moveTo(e[0],e[1]),t.arc(e[0],e[1],1,0,2*Math.PI);else{t.moveTo(e[0],e[1]);for(let s=2;s<e.length;s+=2)t.lineTo(e[s],e[s+1]);e.length>4&&t.lineTo(e[0],e[1])}}setPoints(t){const e=t.length;this._points=new Float64Array(2*e),this._coords=new Float64Array(2*e),this._edges=new Float64Array(2*e),this._normals=new Float64Array(2*e);const s=this._points;for(let i=0,r=0,n=1;i<e;++i,r+=2,n+=2){const e=t[i];s[r]=e[0],s[n]=e[1]}this._dirty_coords=!0}_calculateCoords(){const t=this.x,e=this.y,s=this.angle,i=this.scale_x,r=this.scale_y,n=this._points,o=this._coords,a=n.length;let h,l,c,_;for(let u=0,d=1;u<a;u+=2,d+=2){let a=n[u]*i,g=n[d]*r;if(s){const t=Math.cos(s),e=Math.sin(s),i=a;a=i*t-g*e,g=i*e+g*t}a+=t,g+=e,o[u]=a,o[d]=g,0===u?(h=l=a,c=_=g):(a<h?h=a:a>l&&(l=a),g<c?c=g:g>_&&(_=g))}this._x=t,this._y=e,this._angle=s,this._scale_x=i,this._scale_y=r,this._min_x=h,this._min_y=c,this._max_x=l,this._max_y=_,this._dirty_coords=!1,this._dirty_normals=!0}_calculateNormals(){const t=this._coords,e=this._edges,s=this._normals,i=t.length;for(let r=0,n=1;r<i;r+=2,n+=2){const o=r+2<i?r+2:0,a=t[o]-t[r],h=t[o+1]-t[n],l=a||h?Math.sqrt(a*a+h*h):0;e[r]=a,e[n]=h,s[r]=l?h/l:0,s[n]=l?-a/l:0}this._dirty_normals=!1}}class g extends d{constructor(t=0,e=0,s=0){super(t,e,[[0,0]],0,1,1,s),this._point=!0}}g.prototype.setPoints=void 0;class p{constructor(){this._bvh=new o}createCircle(t=0,e=0,s=0,i=1,r=0){const n=new u(t,e,s,i,r);return this._bvh.insert(n),n}createPolygon(t=0,e=0,s=[[0,0]],i=0,r=1,n=1,o=0){const a=new d(t,e,s,i,r,n,o);return this._bvh.insert(a),a}createPoint(t=0,e=0,s=0){const i=new g(t,e,s);return this._bvh.insert(i),i}createResult(){return new a}static createResult(){return new a}insert(...t){for(const e of t)this._bvh.insert(e,!1);return this}remove(...t){for(const e of t)this._bvh.remove(e,!1);return this}update(){return this._bvh.update(),this}draw(t){return this._bvh.draw(t)}drawBVH(t){return this._bvh.drawBVH(t)}potentials(t){return this._bvh.potentials(t)}collides(t,e,s=null,i=!0){return h(t,e,s,i)}}var y=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var s=arguments[e];for(var i in s)Object.prototype.hasOwnProperty.call(s,i)&&(t[i]=s[i])}return t};var m=function(t){var e=t.type,s=function(t,e){var s={};for(var i in t)e.indexOf(i)>=0||Object.prototype.hasOwnProperty.call(t,i)&&(s[i]=t[i]);return s}(t,["type"]);switch(e){case"circle":return f(s);case"ellipse":return b(s);case"line":return x(s);case"path":return S(s);case"polygon":return W(s);case"polyline":return M(s);case"rect":return D(s);case"g":return O(s);default:throw new Error("Not a valid shape type")}},f=function(t){var e=t.cx,s=t.cy,i=t.r;return[{x:e,y:s-i,moveTo:!0},{x:e,y:s+i,curve:{type:"arc",rx:i,ry:i,sweepFlag:1}},{x:e,y:s-i,curve:{type:"arc",rx:i,ry:i,sweepFlag:1}}]},b=function(t){var e=t.cx,s=t.cy,i=t.rx,r=t.ry;return[{x:e,y:s-r,moveTo:!0},{x:e,y:s+r,curve:{type:"arc",rx:i,ry:r,sweepFlag:1}},{x:e,y:s-r,curve:{type:"arc",rx:i,ry:r,sweepFlag:1}}]},x=function(t){var e=t.x1,s=t.x2;return[{x:e,y:t.y1,moveTo:!0},{x:s,y:t.y2}]},v=/[MmLlHhVvCcSsQqTtAaZz]/g,w={A:7,C:6,H:1,L:2,M:2,Q:4,S:4,T:2,V:1,Z:0},k=["a","c","h","l","m","q","s","t","v"],C=function(t){return-1!==k.indexOf(t)},F=["xAxisRotation","largeArcFlag","sweepFlag"],S=function(t){for(var e=t.d,s=function(t){return t.match(v)}(e),i=function(t){return t.split(v).map(function(t){return t.replace(/[0-9]+-/g,function(t){return t.slice(0,-1)+" -"})}).map(function(t){return t.replace(/\.[0-9]+/g,function(t){return t+" "})}).map(function(t){return t.trim()}).filter(function(t){return t.length>0}).map(function(t){return t.split(/[ ,]+/).map(parseFloat).filter(function(t){return!isNaN(t)})})}(e),r=[],n=void 0,o=0,a=s.length;o<a;o++){var h=s[o],l=h.toUpperCase(),c=w[l],_=C(h);if(c>0)for(var u=i.shift(),d=u.length/c,g=0;g<d;g++){var p=r[r.length-1]||{x:0,y:0};switch(l){case"M":var y=(_?p.x:0)+u.shift(),m=(_?p.y:0)+u.shift();0===g?(n={x:y,y:m},r.push({x:y,y:m,moveTo:!0})):r.push({x:y,y:m});break;case"L":r.push({x:(_?p.x:0)+u.shift(),y:(_?p.y:0)+u.shift()});break;case"H":r.push({x:(_?p.x:0)+u.shift(),y:p.y});break;case"V":r.push({x:p.x,y:(_?p.y:0)+u.shift()});break;case"A":r.push({curve:{type:"arc",rx:u.shift(),ry:u.shift(),xAxisRotation:u.shift(),largeArcFlag:u.shift(),sweepFlag:u.shift()},x:(_?p.x:0)+u.shift(),y:(_?p.y:0)+u.shift()});var f=!0,b=!1,x=void 0;try{for(var k,S=F[Symbol.iterator]();!(f=(k=S.next()).done);f=!0){var W=k.value;0===r[r.length-1].curve[W]&&delete r[r.length-1].curve[W]}}catch(t){b=!0,x=t}finally{try{!f&&S.return&&S.return()}finally{if(b)throw x}}break;case"C":r.push({curve:{type:"cubic",x1:(_?p.x:0)+u.shift(),y1:(_?p.y:0)+u.shift(),x2:(_?p.x:0)+u.shift(),y2:(_?p.y:0)+u.shift()},x:(_?p.x:0)+u.shift(),y:(_?p.y:0)+u.shift()});break;case"S":var M=(_?p.x:0)+u.shift(),P=(_?p.y:0)+u.shift(),D=(_?p.x:0)+u.shift(),B=(_?p.y:0)+u.shift(),T={},O=void 0,R=void 0;p.curve&&"cubic"===p.curve.type?(T.x=Math.abs(p.x-p.curve.x2),T.y=Math.abs(p.y-p.curve.y2),O=p.x<p.curve.x2?p.x-T.x:p.x+T.x,R=p.y<p.curve.y2?p.y-T.y:p.y+T.y):(T.x=Math.abs(D-M),T.y=Math.abs(B-P),O=p.x,R=p.y),r.push({curve:{type:"cubic",x1:O,y1:R,x2:M,y2:P},x:D,y:B});break;case"Q":r.push({curve:{type:"quadratic",x1:(_?p.x:0)+u.shift(),y1:(_?p.y:0)+u.shift()},x:(_?p.x:0)+u.shift(),y:(_?p.y:0)+u.shift()});break;case"T":var j=(_?p.x:0)+u.shift(),A=(_?p.y:0)+u.shift(),E=void 0,H=void 0;if(p.curve&&"quadratic"===p.curve.type){var z={x:Math.abs(p.x-p.curve.x1),y:Math.abs(p.y-p.curve.y1)};E=p.x<p.curve.x1?p.x-z.x:p.x+z.x,H=p.y<p.curve.y1?p.y-z.y:p.y+z.y}else E=p.x,H=p.y;r.push({curve:{type:"quadratic",x1:E,y1:H},x:j,y:A})}}else{var L=r[r.length-1]||{x:0,y:0};L.x===n.x&&L.y===n.y||r.push({x:n.x,y:n.y})}}return r},W=function(t){var e=t.points;return P({closed:!0,points:e})},M=function(t){var e=t.points;return P({closed:!1,points:e})},P=function(t){var e=t.closed,s=t.points.split(/[\s,]+/).map(function(t){return parseFloat(t)}).reduce(function(t,e,s){return s%2==0?t.push({x:e}):t[(s-1)/2].y=e,t},[]);return e&&s.push(y({},s[0])),s[0].moveTo=!0,s},D=function(t){var e=t.height,s=t.rx,i=t.ry,r=t.width,n=t.x,o=t.y;return s||i?T({height:e,rx:s||i,ry:i||s,width:r,x:n,y:o}):B({height:e,width:r,x:n,y:o})},B=function(t){var e=t.height,s=t.width,i=t.x,r=t.y;return[{x:i,y:r,moveTo:!0},{x:i+s,y:r},{x:i+s,y:r+e},{x:i,y:r+e},{x:i,y:r}]},T=function(t){var e=t.height,s=t.rx,i=t.ry,r=t.width,n=t.x,o=t.y,a={type:"arc",rx:s,ry:i,sweepFlag:1};return[{x:n+s,y:o,moveTo:!0},{x:n+r-s,y:o},{x:n+r,y:o+i,curve:a},{x:n+r,y:o+e-i},{x:n+r-s,y:o+e,curve:a},{x:n+s,y:o+e},{x:n,y:o+e-i,curve:a},{x:n,y:o+i},{x:n+s,y:o,curve:a}]},O=function(t){return t.shapes.map(function(t){return m(t)})},R=m,j=function(t){var e="",s=0,i=void 0,r=!0,n=!1,o=void 0;try{for(var a,h=t[Symbol.iterator]();!(r=(a=h.next()).done);r=!0){var l=a.value,c=l.curve,_=void 0!==c&&c,u=l.moveTo,d=l.x,g=l.y,p=0===s||u,y=s===t.length-1||t[s+1].moveTo,m=0===s?null:t[s-1];if(p)i=l,y||(e+="M"+d+","+g);else if(_){switch(_.type){case"arc":var f=l.curve,b=f.largeArcFlag,x=void 0===b?0:b,v=f.rx,w=f.ry,k=f.sweepFlag,C=void 0===k?0:k,F=f.xAxisRotation;e+="A"+v+","+w+","+(void 0===F?0:F)+","+x+","+C+","+d+","+g;break;case"cubic":var S=l.curve;e+="C"+S.x1+","+S.y1+","+S.x2+","+S.y2+","+d+","+g;break;case"quadratic":var W=l.curve;e+="Q"+W.x1+","+W.y1+","+d+","+g}y&&d===i.x&&g===i.y&&(e+="Z")}else y&&d===i.x&&g===i.y?e+="Z":d!==m.x&&g!==m.y?e+="L"+d+","+g:d!==m.x?e+="H"+d:g!==m.y&&(e+="V"+g);s++}}catch(t){n=!0,o=t}finally{try{!r&&h.return&&h.return()}finally{if(n)throw o}}return e},A=function(t){var e=Array.isArray(t),s=e?Array.isArray(t[0]):"g"===t.type,i=e?t:s?t.shapes.map(function(t){return R(t)}):R(t);return s?i.map(function(t){return j(t)}):j(i)},E=("function"==typeof Symbol&&Symbol.iterator,s(0));s.d(e,"a",function(){return H});class H{constructor(t,e){this.p5=t,this.settings=Object.assign({},i,e),this.paused=!1,this.showWalkers=this.settings.ShowWalkers,this.showClusters=this.settings.ShowClusters,this.showShapes=this.settings.ShowShapes,this.useFrame=this.settings.UseFrame,this.renderMode=this.settings.RenderMode,this.numWalkers=0,this.customMovementFunction=void 0,this.edgeMargin=this.settings.EdgeMargin,this.edges={},this.frame={},"number"==typeof this.settings.FrameSize?(this.frame.left=window.innerWidth/2-this.settings.FrameSize/2,this.frame.right=window.innerWidth/2+this.settings.FrameSize/2,this.frame.top=window.innerHeight/2-this.settings.FrameSize/2,this.frame.bottom=window.innerHeight/2+this.settings.FrameSize/2):"object"==typeof this.settings.FrameSize&&(this.frame.left=window.innerWidth/2-this.settings.FrameSize[0]/2,this.frame.right=window.innerWidth/2+this.settings.FrameSize[0]/2,this.frame.top=window.innerHeight/2-this.settings.FrameSize[1]/2,this.frame.bottom=window.innerHeight/2+this.settings.FrameSize[1]/2),this.resetEdges(),this.maxDistance=this.p5.dist(this.edges.left,this.edges.top,window.innerWidth/2,window.innerHeight/2),this.system=new p,this.bodies=[],this.shapes=[],this.lines=[]}iterate(){this.paused||(this.settings.ReplenishWalkers&&this.numWalkers<this.settings.MaxWalkers&&this.createDefaultWalkers(this.settings.MaxWalkers-this.numWalkers,this.settings.ReplenishmentSource),this.moveWalkers(),this.system.update(),this.handleCollisions(),this.pruneWalkers())}draw(){if(this.settings.UseColors?this.p5.background(this.getColorStringFromObject(this.settings.BackgroundColor)):this.p5.background(255),this.showShapes)for(let t of this.shapes){this.settings.UseColors?(this.p5.fill(this.getColorStringFromObject(this.settings.ShapeColor)),this.p5.stroke(this.getColorStringFromObject(this.settings.ShapeColor))):(this.p5.noFill(),this.p5.stroke(100)),this.p5.beginShape();for(let e=0;e<t._coords.length;e+=2)this.p5.vertex(t._coords[e],t._coords[e+1]);this.p5.endShape()}if("Lines"==this.renderMode){if(this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.LineColor)):this.p5.stroke(75),this.lines.length>0)for(let t of this.lines)this.p5.line(t.p1.x,t.p1.y,t.p2.x,t.p2.y)}else for(let t of this.bodies)if(t._point)this.p5.noFill(),t.stuck&&this.showClusters?(this.p5.noStroke(),this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.ClusterColor)):this.p5.fill(200),this.p5.ellipse(t.x,t.y,5)):!t.stuck&&this.showWalkers?this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.WalkerColor)):this.p5.stroke(0):this.p5.noStroke(),this.p5.point(t.x,t.y);else if(t._circle)this.settings.UseStroke?this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.BackgroundColor)):this.p5.stroke(255):this.p5.noStroke(),t.stuck&&this.showClusters?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.ClusterColor)):this.p5.fill(120):!t.stuck&&this.showWalkers?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.WalkerColor)):this.p5.fill(230):this.p5.noFill(),this.p5.ellipse(t.x,t.y,2*t.radius);else if(t._polygon){this.settings.UseStroke?this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.BackgroundColor)):this.p5.stroke(255):this.p5.noStroke(),t.stuck&&this.showClusters?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.ClusterColor)):this.p5.fill(120):!t.stuck&&this.showWalkers?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.WalkerColor)):this.p5.fill(230):this.p5.noFill(),this.p5.beginShape();for(let e=0;e<t._coords.length-1;e+=2)this.p5.vertex(t._coords[e],t._coords[e+1]);this.p5.endShape()}this.useFrame&&this.drawFrame()}drawFrame(){this.p5.noFill(),this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.FrameColor)):this.p5.stroke(0),"number"==typeof this.settings.FrameSize?this.p5.rect(window.innerWidth/2-this.settings.FrameSize/2-1,window.innerHeight/2-this.settings.FrameSize/2-1,this.settings.FrameSize+2,this.settings.FrameSize+2):"object"==typeof this.settings.FrameSize&&this.p5.rect(window.innerWidth/2-this.settings.FrameSize[0]/2-1,window.innerHeight/2-this.settings.FrameSize[1]/2-1,this.settings.FrameSize[0]+2,this.settings.FrameSize[1]+2)}resetEdges(){this.edges.left=this.useFrame?this.frame.left:0,this.edges.right=this.useFrame?this.frame.right:window.innerWidth,this.edges.top=this.useFrame?this.frame.top:0,this.edges.bottom=this.useFrame?this.frame.bottom:window.innerHeight}moveWalkers(){if(this.bodies.length>0)for(let t of this.bodies)if(!t.stuck){let e,s=this.p5.random(-1,1),i=this.p5.random(-1,1);if(this.settings.UsePerWalkerBias&&t.hasOwnProperty("BiasTowards"))s+=(e=this.getDeltasTowards(t.x,t.y,t.BiasTowards.x,t.BiasTowards.y)).x,i+=e.y;else switch(this.settings.BiasTowards){case"Top":i-=this.settings.BiasForce;break;case"Bottom":i+=this.settings.BiasForce;break;case"Left":s-=this.settings.BiasForce;break;case"Right":s+=this.settings.BiasForce;break;case"Center":s+=(e=this.getDeltasTowards(t.x,t.y,window.innerWidth/2,window.innerHeight/2)).x,i+=e.y;break;case"Edges":s-=(e=this.getDeltasTowards(t.x,t.y,window.innerWidth/2,window.innerHeight/2)).x,i-=e.y;break;case"Equator":t.y<window.innerHeight/2?i+=this.settings.BiasForce:i-=this.settings.BiasForce;break;case"Meridian":t.x<window.innerWidth/2?s+=this.settings.BiasForce:s-=this.settings.BiasForce}if(null!=typeof this.customMovementFunction&&this.customMovementFunction instanceof Function){let e=this.customMovementFunction(t);s+=e.dx,i+=e.dy}t._point&&(s=Math.round(s),i=Math.round(i)),t.x+=s,t.y+=i,t.age++}}getDeltasTowards(t,e,s,i){let r=Math.atan2(i-e,s-t);return{x:Math.cos(r)*this.settings.BiasForce,y:Math.sin(r)*this.settings.BiasForce}}handleCollisions(){for(let t of this.shapes){const e=t.potentials();for(let s of e)t.collides(s)&&(s.stuck=!0,this.numWalkers--)}for(let t of this.bodies){if(t.stuck)continue;const e=t.potentials();for(let s of e)t._point?s.stuck&&(t.stuck=!0,this.numWalkers--):s.stuck&&t.collides(s)&&(t.stuck=!0,this.numWalkers--,this.settings.CaptureLines&&this.lines.push({p1:{x:t.x,y:t.y},p2:{x:s.x,y:s.y}}))}}pruneWalkers(){if(this.settings.PruneOldWalkers||this.settings.PruneDistantWalkers)for(let[t,e]of this.bodies.entries())!e.stuck&&(this.settings.PruneOldWalkers&&e.age>this.settings.MaxAge||this.settings.PruneDistantWalkers&&this.p5.dist(e.x,e.y,e.originalX,e.originalY)>this.settings.MaxWanderDistance)&&(e.remove(),this.bodies.splice(t,1),this.numWalkers--)}createParticle(t){if(void 0===t||"object"!=typeof t)return;let e;if(t.hasOwnProperty("type"))switch(t.type){case"Point":(e=this.system.createPoint(Math.round(t.x),Math.round(t.y)))._point=!0;break;case"Circle":default:(e=this.system.createCircle(t.x,t.y,t.diameter/2))._circle=!0;break;case"Polygon":(e=this.system.createPolygon(t.x,t.y,t.polygon,t.hasOwnProperty("rotation")?this.p5.radians(t.rotation):0))._polygon=!0}else{const s=t.hasOwnProperty("diameter")?t.diameter:this.settings.CircleDiameter;(e=this.system.createCircle(t.x,t.y,s/2))._circle=!0}e.stuck=!!t.hasOwnProperty("stuck")&&t.stuck,e.age=0,t.hasOwnProperty("BiasTowards")&&(e.BiasTowards=t.BiasTowards),e.originalX=e.x,e.originalY=e.y,this.bodies.push(e)}createWalker(t){this.createParticle(t),this.numWalkers++}createDefaultWalkers(t=this.settings.MaxWalkers,e=this.settings.WalkerSource){for(let s=0;s<t;s++){let t={};switch(e){case"Edges":switch(Math.round(this.p5.random(1,4))){case 1:t.x=this.p5.random(this.edges.left+this.edgeMargin,this.edges.right-this.edgeMargin),t.y=this.p5.random(this.edges.top,this.edges.top+this.edgeMargin);break;case 3:t.x=this.p5.random(this.edges.left+this.edgeMargin,this.edges.right-this.edgeMargin),t.y=this.p5.random(this.edges.bottom-this.edgeMargin,this.edges.bottom);break;case 4:t.x=this.p5.random(this.edges.left,this.edges.left+this.edgeMargin),t.y=this.p5.random(this.edges.top,this.edges.bottom);break;case 2:t.x=this.p5.random(this.edges.right-this.edgeMargin,this.edges.right),t.y=this.p5.random(this.edges.top,this.edges.bottom)}break;case"Circle":let s;switch(typeof this.settings.FrameSize){case"number":s=this.settings.FrameSize/2;break;case"object":s=this.settings.FrameSize[0]>this.settings.FrameSize[1]?this.settings.FrameSize[1]/2:this.settings.FrameSize[0]/2}let i=this.p5.random(5,s),r=this.p5.random(360),n=this.settings.hasOwnProperty("CircleCenter")?this.settings.CircleCenter:{x:window.innerWidth/2,y:window.innerHeight/2};t.x=n.x+i*Math.cos(r*Math.PI/180),t.y=n.y+i*Math.sin(r*Math.PI/180);break;case"Random":t.x=this.p5.random(this.edges.left,this.edges.right),t.y=this.p5.random(this.edges.top,this.edges.bottom);break;case"Center":t.x=window.innerWidth/2,t.y=window.innerHeight/2;break;case"Offscreen":if(t.x=this.p5.random(this.edges.left-200,this.edges.right+200),t.y=this.p5.random(this.edges.top-200,this.edges.bottom+200),t.x>this.edges.left&&t.x<this.edges.right&&t.y>this.edges.top&&t.y<this.edges.bottom)continue}if(this.settings.VaryDiameterByDistance){let e=this.p5.dist(t.x,t.y,window.innerWidth/2,window.innerHeight/2);t.diameter=this.p5.map(e,0,this.maxDistance,this.settings.CircleDiameterRange[0],this.settings.CircleDiameterRange[1])}else this.settings.VaryDiameterRandomly&&(t.diameter=this.p5.random(this.settings.CircleDiameterRange[0],this.settings.CircleDiameterRange[1]));this.createWalker(t)}}createDefaultClusters(t=this.settings.InitialClusterType){let e=[];switch(t){case"Point":e.push({x:window.innerWidth/2,y:window.innerHeight/2,diameter:this.settings.CircleDiameter});break;case"Ring":let s=100,i=20;for(let t=0;t<i;t++)e.push({x:window.innerWidth/2+s*Math.cos(360/i*t*Math.PI/180),y:window.innerHeight/2+s*Math.sin(360/i*t*Math.PI/180),diameter:this.settings.CircleDiameter});break;case"Random":for(let t=0;t<100;t++)e.push({x:this.p5.random(this.edges.left,this.edges.right),y:this.p5.random(this.edges.top,this.edges.bottom),diameter:this.settings.CircleDiameter});break;case"Wall":switch(this.settings.BiasTowards){case"Top":e=this.createHorizontalClusterWall(this.edges.top);break;case"Bottom":e=this.createHorizontalClusterWall(this.edges.bottom);break;case"Left":e=this.createVerticalClusterWall(this.edges.left);break;case"Right":e=this.createVerticalClusterWall(this.edges.right);break;case"Edges":e=(e=(e=(e=e.concat(this.createHorizontalClusterWall(this.edges.top))).concat(this.createHorizontalClusterWall(this.edges.bottom))).concat(this.createVerticalClusterWall(this.edges.left))).concat(this.createVerticalClusterWall(this.edges.right));break;case"Equator":e=e.concat(this.createHorizontalClusterWall(window.innerHeight/2));break;case"Meridian":e=e.concat(this.createVerticalClusterWall(window.innerWidth/2))}}this.createClusterFromParams(e)}createHorizontalClusterWall(t){let e=[],s=this.useFrame?this.edges.right-this.edges.left:window.innerWidth;for(let i=0;i<=s/this.settings.CircleDiameter;i++)e.push({x:this.edges.left+i*this.settings.CircleDiameter,y:t,diameter:this.settings.CircleDiameter});return e}createVerticalClusterWall(t){let e=[],s=this.useFrame?this.edges.bottom-this.edges.top:window.innerHeight;for(let i=0;i<=s/this.settings.CircleDiameter;i++)e.push({x:t,y:this.edges.top+i*this.settings.CircleDiameter,diameter:this.settings.CircleDiameter});return e}createClusterFromParams(t){if(t.length>0)for(let e of t)e.stuck=!0,this.createParticle(e)}createShapesFromPaths(t){if(t.hasOwnProperty("points")||0!=t.length)for(let e of t)if(e.solid){let t=this.system.createPolygon(e.x,e.y,e.points);t.solid=e.solid,t.closed=e.closed,this.shapes.push(t)}else for(let t=1;t<e.points.length;t++){let s=this.system.createPolygon(e.x,e.y,[[e.points[t-1][0],e.points[t-1][1]],[e.points[t][0],e.points[t][1]]]);s.solid=!1,s.closed=!1,this.shapes.push(s)}else console.error("Unable to create shapes. Paths must have an array of points [[x,y],...]")}removeAll(){for(let t of this.bodies)this.system.remove(t);for(let t of this.shapes)this.system.remove(t);this.bodies=[],this.shapes=[],this.lines=[],this.numWalkers=0}togglePause(){this.paused=!this.paused}toggleShowWalkers(){this.showWalkers=!this.showWalkers}toggleShowClusters(){this.showClusters=!this.showClusters}toggleShowShapes(){this.showShapes=!this.showShapes}toggleUseFrame(){this.useFrame=!this.useFrame,this.resetEdges()}toggleLineRenderingMode(){"Lines"!=this.renderMode?this.settings.CaptureLines?this.renderMode="Lines":console.error("Line rendering mode only allowed when CaptureLines is set."):this.renderMode="Shapes"}pause(){this.paused=!0}unpause(){this.paused=!1}getColorStringFromObject(t){let e="hsla("+t.h+", "+t.s+"%, "+t.b+"%, ";return t.hasOwnProperty("a")?e+=t.a+")":e+="1.0)",e}export(){let t=document.createElement("svg");switch(t.setAttribute("xmlns","http://www.w3.org/2000/svg"),t.setAttribute("xmlns:xlink","http://www.w3.org/1999/xlink"),t.setAttribute("width",window.innerWidth),t.setAttribute("height",window.innerHeight),t.setAttribute("viewBox","0 0 "+window.innerWidth+" "+window.innerHeight),this.renderMode){case"Shapes":default:for(let e of this.bodies)(e.stuck||this.showWalkers)&&(e._circle?t.appendChild(this.createCircleElFromBody(e)):t.appendChild(this.createPathElFromPoints(this.getPointsFromCoords(e._coords))));break;case"Lines":if(this.lines.length>0)for(let e of this.lines){let s=[];s.push({x:e.p1.x,y:e.p1.y}),s.push({x:e.p2.x,y:e.p2.y}),t.appendChild(this.createPathElFromPoints(s))}}if(this.shapes.length>0)for(let e of this.shapes)t.appendChild(this.createPathElFromPoints(this.getPointsFromCoords(e._coords)));let e=document.implementation.createDocumentType("svg","-//W3C//DTD SVG 1.1//EN","http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"),s=document.implementation.createDocument("http://www.w3.org/2000/svg","svg",e);s.replaceChild(t,s.documentElement);let i=(new XMLSerializer).serializeToString(s),r=new Blob([i.replace(/></g,">\n\r<")]);Object(E.saveAs)(r,"dla-"+Date.now()+".svg")}getPointsFromCoords(t){let e=[];for(let s=0;s<t.length-1;s+=2)e.push({x:t[s],y:t[s+1]});return e}createPathElFromPoints(t){let e="";for(let[s,i]of t.entries())e+=i.x+","+i.y,s<t.length-1&&(e+=" ");let s=A({type:"polyline",points:e}),i=document.createElement("path");return i.setAttribute("d",s),i.setAttribute("style","fill: none; stroke: black; stroke-width: 1"),i}createCircleElFromBody(t){let e=document.createElement("circle");return e.setAttribute("cx",t.x),e.setAttribute("cy",t.y),e.setAttribute("r",t.radius),e}}},15:function(t,e,s){"use strict";s.r(e);var i={CircleDiameterRange:[2,8],VaryDiameterByDistance:!1,VaryDiameterRandomly:!0,BiasTowards:"Center",UseColors:!0,RenderMode:"Shapes"},r=s(1);let n,o,a;new p5(function(t){function e(){n.removeAll(),n.createDefaultWalkers(),n.createDefaultClusters("Point")}t.preload=function(){t.soundFormats("mp3"),o=t.loadSound("../../assets/relax_rezz")},t.setup=function(){t.createCanvas(window.innerWidth,window.innerHeight),t.colorMode(t.HSB,255),t.ellipseMode(t.CENTER),o.setVolume(.8),a=new p5.Amplitude,(n=new r.a(t,i)).customMovementFunction={dx:1e3*a.getLevel(),dy:100*a.getLevel()},e()},t.draw=function(){if(o.isPlaying()){let t=100*a.getLevel();n.settings.BiasForce=50*a.getLevel(),n.numWalkers<0&&(n.removeAll(),n.createDefaultWalkers(),n.createDefaultClusters("Point")),t>10&&n.toggleLineRenderingMode(),n.iterate(),n.draw()}},t.mousePressed=function(){o.isPlaying()?o.stop():o.play()},t.keyReleased=function(){switch(t.key){case" ":n.togglePause();break;case"w":n.toggleShowWalkers();break;case"c":n.toggleShowClusters();break;case"r":e();break;case"f":n.toggleUseFrame(),e();break;case"l":n.toggleLineRenderingMode();break;case"e":n.export();break;case"1":n.settings.VaryDiameterByDistance=!0,n.settings.VaryDiameterRandomly=!1,n.settings.MaxWalkers=1e3,e();break;case"p":o.play();case"2":n.settings.VaryDiameterByDistance=!1,n.settings.VaryDiameterRandomly=!0,n.settings.MaxWalkers=700,e()}}})},2:function(t,e){var s;s=function(){return this}();try{s=s||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(s=window)}t.exports=s}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,